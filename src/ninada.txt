main.css
.ttt {
    border: 100px solid black; /* Параметры рамки */
    padding: 5px; /* Поля вокруг текста */
    margin-bottom: 5px; /* Отступ снизу */
   }
    #center { text-align: center; }
   .content {
    width: 75%; /* Ширина слоя */
    background: #fc0; /* Цвет фона */
   } */


   /*параметры */ 
    .player{
      height: 95vh;
      display: flex;
      align-items: center;
      flex-direction: column;
      justify-content: center;
  }
  /*параметры */ 
    .wrapper{
      border: 1px solid transparent;
      padding: 30px;
      border-radius: 20px;
      background-color: #ddd;
      box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;
    }
/*параметры верхней части плеера */ 
    .details {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    }
  
/*параметры картинки*/ 
    .track-art {
    margin: 25px;
    height: 250px;
    width: 250px;
    border:2px solid 	#FFFAFA;
    background-size: cover;
    background-position: center;
    border-radius: 50%;
    -moz-box-shadow: 0px 6px 5px black;
    -webkit-box-shadow: 0px 6px 5px black;
    box-shadow: 0px 6px 5px black;
    -moz-border-radius:190px;
    -webkit-border-radius:190px;
    border-radius:190px;
    }

/*параметры */ 
    .now-playing {
    font-size: 1rem;
    }
    
/*параметры названия песни*/ 
    .track-name {
    font-size: 2.5rem;
    }
    
/*параметры имени исполнителя*/ 
    .track-artist {
    margin-top: 5px;
    font-size: 1.5rem;
    }
    
/*параметры переключателя проигрывателя. Пауза, повтор, следующая, рандомная, следующая, предыдущая */ 
    .buttons {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin-bottom: 30px;
    }

    .active{
        color: black;
    }
    
    .repeat-track,
    .random-track,
    .playpause-track,
    .prev-track,
    .next-track {
    padding: 25px;
    opacity: 0.8;
    transition: opacity .2s;
    }
    
    .repeat-track:hover,
    .random-track:hover,
    .playpause-track:hover,
    .prev-track:hover,
    .next-track:hover {
    opacity: 1.0;
    }
    
    .slider_container {
    display: flex;
    justify-content: center;
    align-items: center;
    }
    
    .seek_slider, .volume_slider {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    height: 5px;
    background: #83A9FF;
    -webkit-transition: .2s;
    transition: opacity .2s;
    }
    
    .seek_slider::-webkit-slider-thumb,
    .volume_slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    width: 15px;
    height: 15px;
    background: white;
    border: 3px solid #3774FF;
    cursor: grab;
    border-radius: 100%;
    }
    
    .seek_slider:hover,
    .volume_slider:hover {
    opacity: 1.0;
    }
    
    .seek_slider {
    width: 60%;
    }
    
    .volume_slider {
    width: 30%;
    }
    
    .current-time,
    .total-duration {
    padding: 10px;
    }
    
    i.fa-volume-down,
    i.fa-volume-up {
    padding: 10px;
    }
    
    i,
    i.fa-play-circle,
    i.fa-pause-circle,
    i.fa-step-forward,
    i.fa-step-backward,
    p {
    cursor: pointer;
    }
    .randomActive{
        color: black;
    }
    .rotate {
        animation: rotation 8s infinite linear;
    }
    @keyframes rotation { /*для анимации, поворот картинки на 360 градусов*/
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(359deg);
        }
    }
    .loader {  
      height: 70px;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .loader .stroke{     /*связь песни и анимации волн*/
        background: #f1f1f1;
        height: 150%;
        width: 10px;
        border-radius: 50px;
        margin: 0 5px;
        animation: animate 1.4s linear infinite;
    }
      @keyframes animate { /*анимация для волн*/
        50% {
          height: 20%;
          background: #4286f4;
        }
    
        100% {
          background: #4286f4;
          height: 100%;
        }
      }
      .stroke:nth-child(1){
          animation-delay: 0s;
      }
      .stroke:nth-child(2){
        animation-delay: 0.3s;
    }
    .stroke:nth-child(3){
        animation-delay: 0.6s;
    }
    .stroke:nth-child(4){
        animation-delay: 0.9s;
    }
    .stroke:nth-child(5){
        animation-delay: 0.6s;
    }
    .stroke:nth-child(6){
        animation-delay: 0.3s;
    }
    .stroke:nth-child(7){
        animation-delay: 0s;
    }




















index.html
 <div class="player">
    <div class="wrapper">
        <div class="details">
            <div class="now-playing">Музыкальный плеер</div>
            <div class="track-art"></div>
            <div class="track-name">Название трека</div>
            <div class="track-artist">Исполнитель</div>
        </div>

        <div class="slider_container">
            <div class="current-time">00:00</div>
             
        </div>

        <div class="slider_container">
            <i class="fa fa-volume-down"></i>
            
             <i class="fa fa-volume-up"></i>
        </div>

        <div class="buttons">
            <div class="random-track" onclick="randomTrack()">
                <i class="fas fa-random fa-2x" title="random"></i>
            </div>
            <div class="prev-track" onclick="prevTrack()">
                 <i class="fa fa-step-backward fa-2x"></i>
             </div>
             <div class="playpause-track" onclick="playpauseTrack()">
                 <i class="fa fa-play-circle fa-5x"></i>
             </div>
             <div class="next-track" onclick="nextTrack()">
                 <i class="fa fa-step-forward fa-2x"></i>
             </div>
             <div class="repeat-track" onclick="repeatTrack()">
                 <i class="fa fa-repeat fa-2x" title="repeat"></i>
             </div>
        </div>

         <div id="wave">
             <span class="stroke"></span>
             <span class="stroke"></span>
             <span class="stroke"></span>
             <span class="stroke"></span>
             <span class="stroke"></span>
             <span class="stroke"></span>
             <span class="stroke"></span>
         </div>  
    </div>
</div>

 
    
    <script type="text/babel"> 
    class App extends React.Component{
  constructor(props){
    super(props);
    this.state = {
      squares: Array(9).fill(null),
      count: 0
    }
    this.winnerLine = [
      [0,1,2],
      [3,4,5],
      [6,7,8],
      [0,3,6],
      [1,4,7],
      [2,5,8],
      [0,4,8],
      [2,4,6]
      ]

  }


isWinner = () => {
let s = (this.state.count % 2 === 0) ? 'X' : 'O';
for (let i = 0; i < 8; i++){
  let line = this.winnerLine[i];
  if(this.state.squares[line[0]] === s 
    && this.state.squares[line[1]] === s
    && this.state.squares[line[2]] === s){
      alert(s + ' won!');
      window.location.reload();
    }
}
}

clickHandler = event => {
let data = event.target.getAttribute('data');// номер квадрата по которому кликнули
let currentSquares = this.state.squares;
console.log(currentSquares);

if(currentSquares[data] == null){
currentSquares[data] = (this.state.count % 2 === 0) ? 'X' : 'O';
this.setState({count: this.state.count + 1});
this.setState({squares: currentSquares});
}
else{alert('Клетка уже занята!')}
this.isWinner();
}

  render() {
    return (
      <div className = "tic-tac-toe">
        <div className = "ttt-grid"onClick={this.clickHandler} data = "0">{this.state.squares[0]}</div>
        <div className = "ttt-grid"onClick={this.clickHandler} data = "1">{this.state.squares[1]}</div>
        <div className = "ttt-grid"onClick={this.clickHandler} data = "2">{this.state.squares[2]}</div>
        <div className = "ttt-grid"onClick={this.clickHandler} data = "3">{this.state.squares[3]}</div>
        <div className = "ttt-grid"onClick={this.clickHandler} data = "4">{this.state.squares[4]}</div>
        <div className = "ttt-grid"onClick={this.clickHandler} data = "5">{this.state.squares[5]}</div>
        <div className = "ttt-grid"onClick={this.clickHandler} data = "6">{this.state.squares[6]}</div>
        <div className = "ttt-grid"onClick={this.clickHandler} data = "7">{this.state.squares[7]}</div>
        <div className = "ttt-grid"onClick={this.clickHandler} data = "8">{this.state.squares[8]}</div>
        
      </div>
    );
  }
}
 </script>
    <meta charset="utf-8">